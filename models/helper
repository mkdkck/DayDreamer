const { Model, DataTypes } = require('sequelize');
const bcrypt = require('bcrypt');
const sequelize = require('../config/connection');

class Helper extends Model {}

Helper.init(
  {
    id: {
        type: DataTypes.INTEGER,
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
    },
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
            isEmail: true,
        },
    },
    password: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
            len: [1],
        },
    },
    skill: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    previousProjects: {
        type: DataTypes.STRING,
        allowNull: false,
    }

  },
  {
    hooks: {
      beforeCreate: async (newHelper) => {
        try {
            newHelper.password = await bcrypt.hash(newHelper.password, 10);
          return newHelper;
        } catch (err) {
          console.log(err);
          return err;
        }
      },
      beforeUpdate: async (updatedHelper) => {
        try {
            updatedHelper.password = await bcrypt.hash(
            updatedHelper.password,
            10
          );
          return updatedHelper;
        } catch (err) {
          console.log(err);
          return err;
        }
      },
    },
    sequelize,
    timestamps: false,
    freezeTableName: true,
    underscored: true,
    modelName: 'helper',
  }
);

module.exports = Helper;
